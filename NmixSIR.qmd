## Using the inverse Normal-logit for transition distributions
We model increments between $S$ and $I$ and $I$ and $R$ using the inverse logit of a normal.
Let $N$ be the total population at risk of infection at time $1$, let $S_t$ be the susceptible population at time $t$, let $I_t$ be the number of people infected at time $t$, let $SI_t$ be the number of new infections at time $t$, let $IR_t$ be the people who recover at time $t$.  
Here is the data generating process:

$$
\begin{aligned}
    I_1 & = c \\
    S_1 & = N - I_1 \\
    SI_t & \sim \text{Binomial}(S_{t-1}, 1 - \exp(-\beta I_{t-1} / N)) \\
    IR_t & \sim \text{Binomial}(I_{t-1}, 1 - e^{-\gamma})\\
    S_t & = S_{t-1} - SI_t \\
    I_t & = I_{t-1} + SI_t - IR_t \\
    ii_t & \sim \text{Binomial}(SI_t, p)
\end{aligned}
$$

We want to approximate this data generating process (DGP) for latent discrete random variables $SI_t$ and $IR_t$ with a model using continuous random variables for $SI_t$ and $IR_t$.
The first step is to move everything from the counts scale to the proportion scale by dividing variables by $N$.
Let these random variables be denoted with lowercase letters to distinguish them from their count representations.
The new DGP is 

$$
\begin{aligned}
    i_1 & = c / N \\
    s_1 & = 1 - i_1 \\
    SI_t & \sim \text{Binomial}(s_{t-1} N, 1 - \exp(-\beta i_{t-1})) \\
    IR_t & \sim \text{Binomial}(i_{t-1} N, 1 - e^{-\gamma})\\
    s_t & = s_{t-1} - SI_t / N \\
    i_t & = i_{t-1} + SI_t / N - IR_t / N \\
    ii_t & \sim \text{Binomial}(si_t N, p)
\end{aligned}
$$

We now approximate the increments $SI_t / N$ and $IR_t / N$ with scaled inverse-logits (which is denoted `expit(x)` below) of normal random variables with approximately the same mean and variance as our binomial-proportion random variables.

$$
\begin{aligned}
    \mathbb{E}\left[\frac{SI_t}{N}\right] &= s_{t-1} (1 - \exp(-\beta i_{t-1})), & \quad \text{Var}\left(\frac{SI_t}{N}\right) &= \frac{s_{t-1}}{N} \exp(-\beta i_{t-1})(1 - \exp(-\beta i_{t-1})) \\
    \mathbb{E}\left[\frac{IR_t}{N}\right] &= i_{t-1} (1 - e^{-\gamma}), & \quad \text{Var}\left(\frac{IR_t}{N}\right) &= \frac{i_{t-1}}{N} e^{-\gamma}(1 - e^{-\gamma})
\end{aligned}
$$

Let $si_t$ and $ir_t$ be random variables with bounds $[0, s_{t-1}]$ and $[0, i_{t-1}]$, respectively.
We need to find $u_t$ and $w_t$ distributed on $[0, 1]$ such that $si_t = u_t s_{t-1}$ and $ir_t = i_{t-1} w_t$.
with the same mean and variance.

$$
\begin{aligned}
    \mathbb{E}[s_{t-1} u_t] &= s_{t-1} \mathbb{E}[u_t] = s_{t-1}(1 - \exp(-\beta i_{t-1})) \\
    \text{Var}(s_{t-1} u_t) &= s_{t-1}^2 \text{Var}(u_t) = \frac{s_{t-1}}{N} \exp(-\beta i_{t-1})(1 - \exp(-\beta i_{t-1}))
\end{aligned}
$$

Solving for $\mathbb{E}[u_t]$ and $\text{Var}(u_t)$ implies

$$
\begin{aligned}
    \mathbb{E}[u_t] &= (1 - \exp(-\beta i_{t-1})) \\
    \text{Var}(u_t) &= \frac{1}{s_{t-1} N} \exp(-\beta i_{t-1})(1 - \exp(-\beta i_{t-1}))
\end{aligned}
$$

What we could do is to take $\tilde{u}_t, \tilde{w}_t \sim \text{Normal}$ and let $u_t = \text{inv\_logit}(\tilde{u}_t)$ and similarly for $w_t$.

The downside of this approach is that the expectation of the inverse logit of a normal does not have an analytic form, but we could approximate with the Delta method.
Let 

$$
\tilde{u}_t \sim \text{Normal}(\mu_u, \sigma^2_u), \tilde{w}_t \sim \text{Normal}(\mu_w, \sigma^2_w).
$$

We need to find $\mu_u, \sigma^2_u$ such that 

$$
\mathbb{E}[\text{expit}(\tilde{u}_t)] \approx (1 - \exp(-\beta i_{t-1})), \quad \text{Var}(\text{expit}(\tilde{u}_t)) \approx \frac{1}{s_{t-1} N} \exp(-\beta i_{t-1})(1 - \exp(-\beta i_{t-1})).
$$

Using the delta method gives that 

$$
\mathbb{E}[\text{expit}(\tilde{u}_t)] \approx \text{expit}(\mu_u), \quad \text{Var}(\text{expit}(\tilde{u}_t)) \approx \sigma_u^2 (\text{expit}(\mu_u)^\prime)^2
$$

This leads to the following parameters:

$$
\begin{aligned}
    \mu_u &= \text{logit}(1 - \exp(-\beta i_{t-1}))  \\
    \sigma_u^2 &= \frac{1}{s_{t-1} N} \frac{\exp(-\beta i_{t-1})(1 - \exp(-\beta i_{t-1}))}{((1 - \text{expit}(\mu_u))\text{expit}(\mu_u))^2} \\
    &= \frac{1}{\exp(-\beta i_{t-1})(1 - \exp(-\beta i_{t-1})) s_{t-1} N}
\end{aligned}
$$

## Spatial Beta Increments 
We assume the transmission parameter $\beta$ are correlated between counties dependent on their distance from each other using exponential spatial decay with variance covariance matrix for $\log(\beta)$ : 
$$
    \Sigma = \sigma^2 * \exp(-D / \rho) 
$$
where $D$ is the CxC distance matrix and $\rho$ represents the "range" of the covariance. We also assume that the neighbors' tranmission rate has an effect on a given county's overall transmission since it's conceivable that neighboring populations would come into contact with each other and that contact is less likely as distance increases. As a result, the spatial model uses the following distributional assumption for the $SI_{it}$ parameter for site $i$: 
$$
\begin{aligned}
SI_{it} & \sim \text{Binomial}(s_{i,t-1} N, 1 - \exp(-\Sigma_{j=1}^{C} \beta_{i,j} i_{j,t-1}))
\end{aligned}
$$
and decreases the effect on distant neighbors using the deterministic function:
$$
\begin{aligned}
\log(\beta)_{ij} = \log(\beta)_{ii} - \nu * D_{ij}
\end{aligned}
$$
where $\nu$ is the spatial decay rate. 

```{r Load Libraries,include=F,echo=F,warning=F}
library(tidyverse)
library(patchwork)
```

```{r,include=T,echo=F,warning=F,message=F,fig.width=10,fig.height=10}

case = read_csv("./data/time_series_covid19_confirmed_US.csv") %>% filter(`Province_State`=="Utah")
case=case %>% dplyr::select(-c(1:5,7:11)) %>% gather("date","cases",-Admin2) %>% mutate(date=mdy(date)) %>% group_by(Admin2,date) %>% summarize(cases=sum(as.numeric(cases)))
case=case %>% ungroup() %>% mutate(date=(date = 7 * (as.numeric(date - min(date)) %/% 7) + min(date))) %>% 
  group_by(date,Admin2) %>% summarize(cases=sum(cases)) %>%
                               filter(date>=ymd("2020-04-15")) %>% filter(date<ymd("2021-06-02"))
case=case %>% group_by(Admin2) %>% mutate(new_cases=cases-lag(cases)) %>% arrange(Admin2,date) %>% filter(!is.na(new_cases))# %>% filter(Admin2 %in% readRDS("final_counties.rds")) %>%# filter(any(cases>1000)) %>%

dat_final=case %>% filter(Admin2 %in% readRDS("final_counties.rds"))#group_by(Admin2) %>% filter(any(cases>100))

pop=read_csv("./data/utah_counties_pop_coord.csv") %>% arrange(desc(Population_2020))

d1=dat_final %>% filter(date<ymd("2020/8/19")) %>% 
ungroup() %>% rename(County="Admin2") %>% left_join(pop,by="County") %>% arrange(desc(Population_2020),date) %>%
dplyr::select(-Population_2020,-Latitude,-Longitude,-cases) %>% pivot_wider(names_from=County,values_from=new_cases)

#fit=readRDS("./output_4/fit_10chn.rds")
#fit2=readRDS("./output_11/fit_10chn.rds")

counties=c(1,2,3,8)

get_plot <- function(fitsize,counties){
fit=readRDS(paste0("./output_",fitsize,"/fit_10chn.rds"))
z_t_d <- fit$draws("si_t", format = "draws_array") |> posterior::as_draws_rvars()
z_t_d <- z_t_d$si_t
qpt025 <- quantile(z_t_d,0.025)
qpt975 <- quantile(z_t_d,0.975)

pop4=pop$Population_2020[counties]

colnames(d1)[counties+1]

obs=rbind(data.frame(value="mean",sweep(mean(z_t_d)[-1,],MARGIN = 2, STATS = pop4, FUN = "*")),
data.frame(value="lwr",sweep(qpt025[1,-1,],MARGIN = 2, STATS = pop4, FUN = "*")),
data.frame(value="upr",sweep(qpt975[1,-1,],MARGIN = 2, STATS = pop4, FUN = "*")))

colnames(obs)[-1] = colnames(d1)[counties+1]


obs=obs %>% gather(County,Cases,-value) %>% pivot_wider(names_from=value,values_from=Cases) %>% unnest() %>% mutate(date=rep(d1$date,fitsize))


d1[,c(1,counties+1)] %>%  gather(County,Cases,-date) %>% 
ggplot(aes(x=date,y=Cases,color=County)) + geom_point() + facet_wrap(~County) + 
geom_line(data=obs,aes(x=date,y=mean),color="black") + geom_line(data=obs,aes(x=date,y=lwr),linetype=2,color="black") + 
geom_line(data=obs,aes(x=date,y=upr),linetype=2,color="black") +
 theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
}

a=get_plot(4,c(1,2,3,8))
b=get_plot(11,c(1,2,3,4,5,6,7,8,10,11,12))

a/b

```

## Some results


```{r,include=T,echo=F,warning=F,message=F}

fit=readRDS(paste0("./output_",4,"/fit_10chn.rds"))
fit2=readRDS(paste0("./output_",11,"/fit_10chn.rds"))


a=ggplot() + 
geom_histogram(data=data.frame(p=rbeta(1e6,0.5 * 4, 0.5 * 4)),
aes(x=p,..density..),alpha=.25,fill="grey",linetype=2) +
geom_histogram(data=fit$draws("p") %>% as_tibble %>% gather() %>% mutate(key=factor(key)), 
aes(x=value,y=..density..,fill=1),alpha=0.75) + 
scale_fill_viridis_c() +
theme_minimal() +
theme(legend.position="none")

b=ggplot() + 
geom_histogram(data=data.frame(p=rbeta(1e6,0.5 * 4, 0.5 * 4)),
aes(x=p,..density..),alpha=.25,fill="grey",linetype=2) +
geom_histogram(data=fit2$draws("p") %>% as_tibble %>% gather() %>% mutate(key=factor(key)), 
aes(x=value,y=..density..,fill=1),alpha=0.75) + 
scale_fill_viridis_c() +
theme_minimal() +
theme(legend.position="none")

a+b
```





## Simulation 
